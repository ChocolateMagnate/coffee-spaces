@page "/"
@page "/home"
<div>
    <h1>Welcome to the Coffee Spaces!</h1>
    <p>Our mission is to deliver productive and enjoyable environment for developers 
        to make the software that powers the world with a cup of coffee in their hands.
    </p>
    <h2>How do we work?</h2>
    <p>We thrive to deliver the one space to create, store, manage your codebase, while 
        providing the line of communication with your team and the tools to nurture developers.
    </p>
    <p>On our platform, you can create <b>teams</b> and assign different <b>projects</b> to them.
        In every team there's a <i>team lead</i> that has the administrative rights as well as 
        different ranks that have the tools to do their job:
    </p>
    <ul>
        @foreach (var rank in ranks)
        {
            <h3>@rank.Title</h3>
            <p>@rank.Description</p>
            @foreach (var permission in @rank.Permissions)
            {
                <li>@permission</li>
            }
        }
    </ul>
</div>
<p>Fore each of these roles, we facilitate a verity of helpful features, including:</p>
<ul>
    <li>Codebase management</li>
    <li>Issue tracking</li>
    <li>Code reviews</li>
    <li>Continuous integration</li>
    <li>Private and public chats</li>
    <li>Embedded video meeting stream</li>
    <li>And more...</li>
</ul>
<form action="">
    <p>We will be glad to see you in our bar!</p>
    <p>Your name: </p>
    <input type="text" name="name" placeholder="@selectedPlaceholders[0]">
    <p>Your username:</p>
    <input type="text" name="username" placeholder="@selectedPlaceholders[1]">
    <p>Your email: </p>
    <input type="email" name="email" placeholder="@selectedPlaceholders[2]">
    <p>Your password: </p>
    <input type="password" name="password" placeholder="@selectedPlaceholders[3]">
    <button type="submit">Join us</button>
</form>
@code {
    public Index(){
        var rnd = new Random();
        this.selection = rnd.Next(0, 9); //The random set of placeholders
        this.placeholders = new Dictionary<string, List<string>> {
            {"name", new List<string> {"Anabella Baunti", "John Wick", "Jane Boe", "Anna Bell", 
                "Rick Morty", "Jack Smith", "Bill Whanderson", "Stephanie Sweet", "Casper Spooky", "Sabina Panchenko"}},
            {"username", new List<string> {"anabella", "johnwick", "janeboe", "annabell", "rickmorty", 
                "jacksmith", "billwhanderson", "stephaniesweet", "casperspooky", "sabinapanchenko"}},
            {"email", new List<string> {"@anabella.baunti", "@john.wick", "@jane.boe", "@anna.bell", 
                "@rick.morty", "@jack.smith", "@bill.whanderson", "@stephanie.sweet", "@casper.spooky", "@sabina.panchenko"}},
            {"password", new List<string> {"730275", "185205", "937105", "105205", "105835", "028401", 
                "123456", "0185205", "038502", "074936"}},
        };
        this.selectedPlaceholders = new List<string>() { //The selected placeholders 
            placeholders["name"]    [selection],         //to reference in the UI
            placeholders["username"][selection],
            placeholders["email"]   [selection],
            placeholders["password"][selection],
        };
    }
    public int selection { get; set; }
    public List<string> selectedPlaceholders;
    private Dictionary<string, List<string>> placeholders;
    public class Rank {
        public string Title { get; set; }
        public string Description { get; set; }
        public List<string> Permissions { get; set; }
        public Rank(string title, string description, List<string> permissions) {
            Title = title;
            Description = description;
            Permissions = permissions;
        }
    }
    /*These are the positions to iterate thorough. This could have been hardcoded in the UI,
    but the solution to separate it in C# scales more and is overall more beautiful.*/
    public static List<Rank> ranks = new List<Rank> {
        //The supreme almighty position
        new Rank("Team Lead", "Can create and manage projects and teams",
            new List<string> {"create project", "flag the development stages", "integrate with other services",
                "seal repositories", "delete projects", "change roles", "add and remove members", "arrange meetings"}),
        //Senior developers are given power to advise and mentor less experienced colleagues.
        new Rank("Senior Developer", "Sophisticated programmers who can override less experienced peers",
            new List<string> {"flag the development stages", "change roles", "add and remove members",
                "restrict permissions", "protect branches"}),
        //Maintainers' make the codebase more stable and secure.
        new Rank("Maintainer", "Developers entrusted to watch, update and troubleshoot the project",
            new List<string> {"protect branches", "restrict permissions"}),
        //Regular developers are the backbone of the team.
        new Rank("Common Developer", "Regular developers who can create and manage branches",
            new List<string> {"create branches", "use git", "contribute code"}),
        //Interns are the newbies who are learning the ropes.
        new Rank("Intern", "Aspirational apprentices",
            new List<string> {"read code", "submit code"}),
        //Testers guarantee the app is working as intended.
        new Rank("Tester", "Quality assurance specialists",
            new List<string> {"submit bug reports", "contribute code", "use git"}),
        //Designers are responsible for the assets.
        new Rank("Designer", "Visual artists that draw the UI",
            new List<string> {"upload, manage and comment assets"})
    };
}